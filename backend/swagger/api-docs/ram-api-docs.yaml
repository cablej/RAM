swagger: '2.0'

#why do some defintions have summary & others operationId???

info:
  title: RAM Public API
  description: Full documentation of Relationship Access Manager (RAM) public API. All the listed API calls must be prefixed with /api/v1
  version: "1.0.0"

host:

schemes:
  - http
  - https

basePath: /api/v1

produces:
  - application/json

# ---------------------------------------------------------------------------------------------------------------------
# End Points
# ---------------------------------------------------------------------------------------------------------------------

paths:

  # -------------------------------------------------------------------------------------------------------------------
  # Business End Points
  # -------------------------------------------------------------------------------------------------------------------

  # Identities ........................................................................................................

  /identity/me:
    get:
      tags:
        - Business - Identity
      operationId: Identity.findMe
      summary: Get the logged in identity
      description: Get the logged in identity
      responses:
        200:
          description: The identity returned
          schema:
            $ref: "#/definitions/Identity"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'

  /identity/{idValue}:
    get:
      tags:
        - Business - Identity
      operationId: Identity.findMe
      summary: Get the identity by its id value
      description: Get the identity by its id value
      parameters:
        - $ref: "#/parameters/idValue"
      responses:
        200:
          description: The identity returned
          schema:
            $ref: "#/definitions/Identity"
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

  /identity/invitationCode/{invitationCode}:
    get:
      tags:
        - Business - Identity
      operationId: Identity.findMe
      summary: Get the identity by its invitation code
      description: Get the identity by its invitation code
      parameters:
        - $ref: "#/parameters/invitationCode"
      responses:
        200:
          description: The identity returned
          schema:
            $ref: "#/definitions/Identity"
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

  # Parties ...........................................................................................................

  /party/identity/me:
    get:
      tags:
        - Business - Party
      operationId: Party.findMe
      summary: Get the party of the logged in identity
      description: Get the party of the logged in identity
      responses:
        200:
          description: The party returned
          schema:
            $ref: "#/definitions/Party"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'

  /party/identity/{idValue}:
    get:
      tags:
        - Business - Party
      operationId: Party.findByIdentityIdValue
      summary: Get the party by its identity id value
      description: Get the party by its identity id value
      parameters:
        - $ref: "#/parameters/idValue"
      responses:
        200:
          description: The updated party returned
          schema:
            $ref: "#/definitions/Party"
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

  # Relationships .....................................................................................................

  /relationship/{id}:
    get:
      tags:
        - Business - Relationship
      operationId: Relationship.findByIdentifier
      summary: Get Relationship by identifier
      description: Get Relationship by identifier
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        200:
          schema:
            $ref: '#/definitions/Relationship'
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
    delete:
      tags:
        - Business - Relationship
      operationId: Relationship.deleteByIdentifier
      summary: Delete Relationship by Identifier
      description: Delete Relationship by Identifier
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        200:
          schema:
            $ref: '#/definitions/Relationship'
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

  /relationship/invitationCode/{invitationCode}:
    get:
      tags:
        - Business - Relationship
      operationId: Relationship.findPendingByInvitationCodeInDateRange
      summary: Get pending Relationship by invitation code
      description: Get pending Relationship by invitation code
      parameters:
        - $ref: "#/parameters/invitationCode"
      responses:
        200:
          schema:
            $ref: '#/definitions/Relationship'
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

  /relationship/invitationCode/{invitationCode}/accept:
    post:
      tags:
        - Business - Relationship
      operationId: Relationship.acceptByInvitationCode
      summary: Accepts a pending Relationship by invitation code
      description: Accepts a pending Relationship by invitation code
      parameters:
        - $ref: "#/parameters/invitationCode"
      responses:
        200:
          schema:
            $ref: '#/definitions/Relationship'
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

  /relationship/invitationCode/{invitationCode}/reject:
    post:
      tags:
        - Business - Relationship
      operationId: Relationship.rejectByInvitationCode
      summary: Rejects a pending Relationship by invitation code
      description: Rejects a pending Relationship by invitation code
      parameters:
        - $ref: "#/parameters/invitationCode"
      responses:
        200:
          schema:
            $ref: '#/definitions/Relationship'
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

  /relationship/invitationCode/{invitationCode}/notifyDelegate:
    post:
      tags:
        - Business - Relationship
      operationId: Relationship.notifyDelegate
      summary: Notifies the delegate of a Relationship by invitation code
      description: Notifies the delegate of a Relationship by invitation code
      parameters:
        - $ref: "#/parameters/invitationCode"
        - name: relationship
          in: body
          required: true
          schema:
            $ref: '#/definitions/NotifyRelationshipDelegate'
      responses:
        200:
          schema:
            $ref: '#/definitions/Relationship'
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'

  /relationships/{subjectOrDelegate}/identity/{idValue}:
    get:
      tags:
        - Business - Relationship
      operationId: Relationship.listBySubjectOrDelegate
      summary: List Relationships for a subject or delegate
      description: List Relationships for a subject or delegate
      parameters:
        - $ref: "#/parameters/subjectOrDelegate"
        - $ref: "#/parameters/idValue"
        - name: filter
          in: query
          description: Filtering - TODO
          required: false
          type: array
          collectionFormat: multi
          items:
            type: string
        - name: sort
          in: query
          description: Sorting - TODO
          required: false
          type: string
        - name: page
          in: query
          description: Page used for pagination
          required: true
          type: number
          format: int32
        - name: pageSize
          in: query
          description: Page Size used for pagination
          required: false
          type: number
          format: int32
      responses:
        200:
          schema:
            $ref: '#/definitions/RelationshipListResponse'
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'

  /relationship:
    post:
      tags:
        - Business - Relationship
      summary: Create Relationship
      description: Create Relationship
      parameters:
        - name: relationship
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateRelationship'
      responses:
        200:
          description: A relationship document
          schema:
              $ref: '#/definitions/Relationship'
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'
      responses:
        200:
          schema:
            $ref: '#/definitions/Relationship'
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'

  # -------------------------------------------------------------------------------------------------------------------
  # Reference End Points
  # -------------------------------------------------------------------------------------------------------------------

  # Relationship Types ................................................................................................

  /relationshipTypes:
    get:
      tags:
        - Reference - RelationshipType
      operationId: RelationshipType.listIgnoringDateRange
      summary: List Relationship Type resources
      description: List Relationship Type resources
      responses:
        200:
          schema:
            type: array
            items:
              $ref: '#/definitions/RelationshipTypeResourceReference'
        500:
          $ref: '#/responses/500'

  /relationshipType/{code}:
    get:
      tags:
        - Reference - RelationshipType
      operationId: RelationshipType.findByCodeIgnoringDateRange
      parameters:
        - name: code
          in: path
          type: string
          required: true
          description: Relationship type id to be retrieved
      summary: Get a relationship type by relationship type id
      responses:
        200:
          description: Relationship types in RAM
          schema:
            $ref: '#/definitions/RelationshipType'
        400:
          $ref: '#/responses/400'
        404:
          $ref: '#/responses/404'
        500:
          $ref: '#/responses/500'
    put:
      tags:
        - Reference - RelationshipType
      operationId: RelationshipType.insertOrUpdate
      parameters:
        - name: code
          in: path
          type: string
          required: true
          description: Create or update a relationship type
        - name: RelationshipType
          in: body
          description: |
            Information about the RelationshipType to be created or updated.
            The code in path must be identical to the code in the request body. If the code doesn't
            exist in the backend, a new resource will be created otherwise an existing resource with
            the same code gets updated.
          required: true
          schema:
            $ref: '#/definitions/RelationshipType'
      summary: Create/ Update Relationship Type
      description: |
        Create or update a new relationship type
      responses:
        200:
          description: The newly created or updated relationship returned back
          schema:
            $ref: "#/definitions/RelationshipType"
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'

  # Relationship Attribute Names ......................................................................................

  /relationshipAttributeNames:
    get:
      tags:
        - Reference - RelationshipAttributeName
      operationId: RelationshipAttributeName.listIgnoringDateRange
      summary: List RelationshipAttributeName resources
      description: List RelationshipAttributeName resources
      responses:
        200:
          schema:
            type: array
            items:
              $ref: '#/definitions/RelationshipAttributeNameResourceReference'

  /relationshipAttributeName/{code}:
    get:
      tags:
        - Reference - RelationshipAttributeName
      operationId: RelationshipAttributeName.findByCodeIgnoringDateRange
      summary: Get RelationshipAttributeName
      description: Get RelationshipAttributeName
      parameters:
        - $ref: '#/parameters/code'
      responses:
        200:
          schema:
            $ref: '#/definitions/RelationshipAttributeName'
        400:
          $ref: '#/responses/400'
        404:
          schema:
          $ref: '#/responses/404'
        500:
          schema:
          $ref: '#/responses/500'
    put:
      tags:
        - Reference - RelationshipAttributeName
      summary: Create or Update RelationshipAttributeName
      description: Create or Update RelationshipAttributeName
      parameters:
        - $ref: '#/parameters/code'
        - name: RelationshipAttributeName
          in: body
          description: |
            Information about the RelationshipAttributeName to be created or updated.
            The code in path must be identical to the code in the request body. If the code doesn't
            exist in the backend, a new resource will be created otherwise an existing resource with
            the same code gets updated.
          required: true
          schema:
            $ref: '#/definitions/RelationshipAttributeName'
      responses:
        200:
          schema:
            $ref: '#/definitions/RelationshipAttributeName'
        400:
          $ref: '#/responses/400'
        500:
          schema:
          $ref: '#/responses/500'

# ---------------------------------------------------------------------------------------------------------------------
# Models
# ---------------------------------------------------------------------------------------------------------------------

definitions:

  # the pattern is each logical entity will consist of:
  # * an object by the same name as the <entity> which is composed of:
  #   - IRAMObject or ICodeDecode
  #   - <entity>BusinessIdentifier - this is the properties that make up the business id
  #   - <entity>Details - this is the properties that don't make up the business id
  # * <entity>BusinessIdentifier>
  # * <entity>Details
  # * <entity>Request - the combination of <entity>BusinessIdentifier + <entity>Details
  # * <entity>ResourceReference - which is composed of:
  #   - an href to the resource
  #   - a value property which may be null or contains the actual resource
  # * <entity>ListResponse - which is composed of:
  #   - SearchResultResponse - total count + page size
  #   - a collection of the <entity>ResourceReference

  # -------------------------------------------------------------------------------------------------------------------
  # Business Models
  # -------------------------------------------------------------------------------------------------------------------

  # Profile ...........................................................................................................

  Profile:
    type: object
    description: |
      A profile is a collection of detail about the party. A myGov profile consists of Name and Date of Birth. The
      CSP may or may not supply the profile.  Not all identities will be supplied by the CSP. Some profiles may
      be self asserted.
    required: ["provider","name"]
    properties:
      provider:
        type: string
        description: The provider of the profile
        enum: ['ABR','AUTHENTICATOR_APP','MY_GOV','SELF_ASSERTED','VANGUARD','TEMP']
      name:
        $ref: '#/definitions/Name'
      sharedSecrets:
        type: array
        items:
          $ref: '#/definitions/SharedSecret'

  # Name ..............................................................................................................

  Name:
    type: object
    description: Name of a party of profile for either an individual or organisation
    properties:
      givenName:
        type: string
        description: The given name of an individual
      familyName:
        type: string
        description: The family name of an individual
      unstructuredName:
        type: string
        description: The unstructured name of an organisation

  # Shared Secret .....................................................................................................

  SharedSecret:
    type: object
    description: A Shared Secret is a record of sensitive information pertaining to an identity
    properties:
      value:
        type: string
        description: Hashed Value
      sharedSecretType:
        $ref: '#/definitions/SharedSecretType'

  SharedSecretType:
    allOf:
      - $ref: '#/definitions/ICodeDecode'
    type: object
    description: The type of a Shared Secret
    properties:
      domain:
        type: string
        description: The domain the shared secrety type is for

  # Party .............................................................................................................

  Party:
    allOf:
    - $ref: '#/definitions/IRAMObject'
    - $ref: '#/definitions/PartyDetails'
    description: A Party is the concept that participates in Relationships.
    type: object
    required: ["roles","identities"]

  PartyDetails:
    type: object
    required: ["partyType","identities"]
    properties:
      partyType:
        type: string
      identities:
        type: array
        items:
          $ref: '#/definitions/IdentityResourceReference'

  PartyResourceReference:
    description: A reference to a Party
    type: object
    required: ["href","value"]
    properties:
      href:
        type: string
        description: URI that uniquely identifies this Party
      value:
          $ref: '#/definitions/Party'

  PartiesListResponse:
    allOf:
    - $ref: '#/definitions/SearchResultResponse'
    description: A collection of references to parties
    type: object
    required: ["list"]
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/PartyResourceReference'
        minItems: 1

  # Identity ..........................................................................................................

  Identity:
    allOf:
      - $ref: '#/definitions/IRAMObject'
      - $ref: '#/definitions/IdentityBusinessIdentifier'
      - $ref: '#/definitions/IdentityDetails'
    type: object
    description: |
      Parties have at least one, and possibly many identities.  There will be just one default identity.
      Identities consist of a profile which conists of a Name & maybe recorded "shared secret".
      It is the name from the default identity that will be used when it is not possible  to use the
      authentication details to refer to a Party, e.g. when displaying a list of related parties.
    required: ["idType","idValue","defaultIndictor", "profile"]

  IdentityBusinessIdentifier:
    type: object
    required: ["idValue","rawIdValue","identityType"]
    properties:
      idValue:
        description: The identity value (as a composite of the type, scheme, raw id value)
        type: string
      rawIdValue:
        description: The raw identity value
        type: string
      identityType:
        type: string
        description: The identity type
        enum: ['AGENCY_PROVIDED_TOKEN','INVITATION_CODE','LINK_ID','PUBLIC_IDENTIFIER']

  IdentityDetails:
    type: object
    required: ["defaultInd","profile","party"]
    properties:
      defaultInd:
        type: boolean
        description: The default indicator
      agencyScheme:
        type: string
        description: The agency scheme
      agencyToken:
        type: string
        description: The agency token
      invitationCodeStatus:
        type: string
        description: The invitation code status
        enum: ['CLAIMED','PENDING','REJECTED']
      invitationCodeExpiryTimestamp:
        type: string
        description: The invitation code expiry timestamp
      invitationCodeClaimedTimestamp:
        type: string
        description: The invitation code claimed timestamp
      invitationCodeTemporaryEmailAddress:
        type: string
        description: The invitation code temporary email address
      publicIdentifierScheme:
        type: string
        description: The public identifier scheme
      linkIdScheme:
        type: string
        description: The link id scheme
      linkIdConsumer:
        type: string
        description: The link id consumer
      profile:
        $ref: '#/definitions/Profile'
      party:
        # todo resource reference or direct party?
        $ref: '#/definitions/Party'

  IdentityResourceReference:
    type: object
    description: A reference to a Resource
    required: ["href","value"]
    properties:
      href:
        type: string
        description: URI that uniquely identifies this Identity
      value:
        $ref: '#/definitions/Identity'

  # Relationship ......................................................................................................

  Relationship:
    allOf:
    - $ref: '#/definitions/IRAMObject'
    - $ref: '#/definitions/RelationshipBusinessIdentifier'
    - $ref: '#/definitions/RelationshipDetails'
    type: object
    description: |
      A Relationship is a connection between two parties.
      RAM will only record relationships if it is useful (in some way) to agencies for deciding if one party to
      confer authoriatation to another party
    required: ["relationshipTypeURI","subjectPartyRef","delegatePartyRef","startTimestamp","status"]

  RelationshipBusinessIdentifier:
    type: object
    required: ["relationshipTypeURI","subjectPartyRef","delegatePartyRef","startTimestamp"]
    properties:
      relationshipTypeURI:
        type: string
        description: URI that uniquely identifies the reference data type that gives semantic meaning to  this relationship
      subjectPartyRef:
        $ref: '#/definitions/PartyResourceReference'
      delegatePartyRef:
        $ref: '#/definitions/PartyResourceReference'
      startTimestamp:
        type: string
        description: Defines when this relationship comes into effect.  Date in ISO format.
        format: date

  RelationshipDetails:
    type: object
    required: ["status"]
    properties:
      # this has not yet been standardised to a role reference
      subjectPartyRoleURI:
        type: string
        description: URI that uniquely identifies the subject's role in this relationship
      delegatePartyRoleURI:
      # this has not yet been standardised to a role reference
        type: string
        description: URI that uniquely identifies the delegate's role in this relationship
      subjectsNickname:
          $ref: '#/definitions/Name'
      delegatesNickname:
          $ref: '#/definitions/Name'
      endTimestamp:
        type: string
        description: Date in ISO format
        format: date
      attributes:
        type: array
        description: Attributes attached to this relationship based on role type
        items:
          $ref: '#/definitions/RelationshipAttribute'
      status:
        type: string
        description: Indicates where in the lifecycle of relationships; this one is up to.
        enum: ['invalid','pending','active','deleted','cancelled']

  CreateRelationship:
    type: object
    properties:
      rawIdValue:
        type: string
        description: The identity raw id value
      partyType:
        type: string
        description: The Party Type
      givenName:
        type: string
        description: The given name
      familyName:
        type: string
        description: The family name
      unstructuredName:
        type: string
        description: The unstructured name
      sharedSecretTypeCode:
        type: string
        description: The shared secret code
      sharedSecretValue:
        type: string
        description: The schared secret value
      identityType:
        type: string
        description: The identity type
      agencyScheme:
        type: string
        description: The agency scheme
      agencyToken:
        type: string
        description: The agency token
      linkIdScheme:
        type: string
        description: The link id scheme
      linkIdConsumer:
        type: string
        description: The link id consumer
      publicIdentifierScheme:
        type: string
        description: The public identifier scheme
      profileProvider:
        type: string
        description: The profile provider

  NotifyRelationshipDelegate:
    type: object
    properties:
      email:
        type: string
        description: The email of the delegate

  RelationshipResourceReference:
    type: object
    description: A reference to a Resource
    required: ["href","value"]
    properties:
      href:
        type: string
        description: URI that uniquely identifies this Relationship
      value:
        $ref: '#/definitions/Relationship'

  RelationshipListResponse:
    allOf:
    - $ref: '#/definitions/SearchResultResponse'
    type: object
    required: ["list"]
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/RelationshipResourceReference'

  # Relationship Attribute ............................................................................................

  RelationshipAttribute:
    allOf:
    - $ref: '#/definitions/IRAMObject'
    type: object
    description: A Relationship Attribute is a way of recording some "facts" about a Relationship
    required: ["name","value"]
    properties:
      name:
        type: string
        description: Name of an attribute definition
      attributeName:
        $ref: '#/definitions/RelationshipAttributeNameResourceReference'

  # -------------------------------------------------------------------------------------------------------------------
  # Reference Models
  # -------------------------------------------------------------------------------------------------------------------

  # Relationship Type .................................................................................................

  RelationshipType:
    allOf:
      - $ref: '#/definitions/ICodeDecode'
      - $ref: '#/definitions/RelationshipTypeBusinessIdentifier'
      - $ref: '#/definitions/RelationshipTypeDetails'

  RelationshipTypeBusinessIdentifier:
    type: object
    required: ["code"]
    properties:
      code:
        type: string
        description: This is the short code value by which Relationship Types may be known

  RelationshipTypeDetails:
    type: object
    required: ["voluntaryInd","relationshipAttributeNames"]
    properties:
      voluntaryInd:
        type: boolean
        description: Does the Subject Party get a say whether the delegate may have this relationship?
      relationshipAttributeNames:
        type: array
        description: Relationship attributes that may be used with this resource
        items:
          $ref: '#/definitions/RelationshipAttributeNameUsage'

  RelationshipTypeResourceReference:
    type: object
    description: A reference to a Resource
    required: ["href"]
    properties:
      href:
        type: string
        description: URI that uniquely identifies this RelationshipType
      value:
        $ref: '#/definitions/RelationshipType'

  # Relationship Attribute Name Usage .................................................................................

  RelationshipAttributeNameUsage:
    allOf:
      - $ref: '#/definitions/RelationshipAttributeNameUsageDetails'

  RelationshipAttributeNameUsageDetails:
    type: object
    required: ["mandatory","defaultValue"]
    properties:
      mandatory:
        description: Indicator of whether the attribute is mandatory or not
        type: boolean
      defaultValue:
        description: The default value of the attribute
        type: string
      attributeNameDef:
        description: The attribute name
        $ref: '#/definitions/RelationshipAttributeNameResourceReference'

  # Relationship Attribute Name .......................................................................................

  RelationshipAttributeName:
    allOf:
      - $ref: '#/definitions/ICodeDecode'
      - $ref: '#/definitions/RelationshipAttributeNameBusinessIdentifier'
      - $ref: '#/definitions/RelationshipAttributeNameDetails'

  RelationshipAttributeNameBusinessIdentifier:
    type: object
    required: ["code"]
    properties:
      name:
        type: string
        description: This is the short code value by which Relationship Attribute Names may be known

  RelationshipAttributeNameDetails:
    type: object
    required: ["mandatory","fieldType"]
    properties:
      domain:
        description: It is the field type
        type: string
        enum: ['NULL','BOOLEAN','NUMBER','STRING','DATE','MARKDOWN','SINGLE_SELECT','MULTI_SELECT']
      classifier:
        description: It is the classifier to indicate what type of attribute this is and how it is meant to be used (eg this is a permission)
        type: string
        enum: ['PERMISSION', 'OTHER']
      category:
        description: An optional category or grouping for additional meta data (eg a permission in Administrative Services)
        type: string
      purposeText:
        description: An optional purpose text to indicate how this attribute is meant to be used
        type: string
      permittedValues:
        description: An array of the accepted values
        type: array
        items:
          type: string

  RelationshipAttributeNameResourceReference:
    type: object
    description: A reference to a RelationshipAttributeName Resource
    required: ["href"]
    properties:
      href:
        type: string
        description: URL that uniquely identifies this RelationshipAttributeName
      value:
        description: The content of this field is optional, it is the same content for a get request on the href
        schema:
          $ref: '#/definitions/RelationshipAttributeName'

  # -------------------------------------------------------------------------------------------------------------------
  # Base and System Models
  # -------------------------------------------------------------------------------------------------------------------

  Resource:
    type: object
    required: ['href']
    properties:
      href:
        type: string
        description: URL reference to uniquely identified resource
      value:
        type: object
        description: Optional value that represent the respond if one sends a GET request to resource url

  IRAMObject:
    type: object
    required: ['createdAt','updatedAt','deleteInd','resourceVersion']
    properties:
      createdAt:
        description: A timestamp when this resource was first created.
        type: string
        format: date-time
      updatedAt:
        description: A timestamp when this resource was last updated.
        type: string
        format: date-time
      deleteInd:
        type: boolean
        description: An indicated if this resource has been logically deleted.
      resourceVersion:
        type: number
        description: A schema version.

  ICodeDecode:
    type: object
    required: ['code','shortDecodeText','longDecodeText','startTimestamp']
    properties:
      code:
        description: A human friendly mneumonic for this reference data concept
        type: string
      shortDecodeText:
        description: This is a short label for this item of reference data
        type: string
      longDecodeText:
        type: string
        description:  This is a long label for this item of reference data
      startTimestamp:
        type: string
        description: This is the timestamp at which this reference data item may start being used
        format: date-time
      endTimestamp:
        type: string
        description: This is the timestamp at which this reference data item ceased being able to be used (but may continue to exist on existing records)
        format: date-time

  SearchResultResponse:
    type: object
    description: |
      This abstract object just adds common properties to a <entity>SearchResultResponse object
    required: [totalCount, pageSize]
    properties:
      totalCount:
        description: Total number of records matched for this query
        type: integer
        format: int32
      pageSize:
        description: Page Size for the results, which the server may ignore for performance reasons
        type: integer
        format: int32

  Error:
    type: object
    required: ["alert"]
    properties:
      alert:
        $ref: '#/definitions/Alert'

  Alert:
    type: object
    required: ["alertType","messages"]
    properties:
        alertType:
            type: string
            format: can be one of the following values, success, notice or error
        messages:
            type: array
            description: Array of string presenting one or more messages
            items:
                type: string

# ---------------------------------------------------------------------------------------------------------------------
# Parameters
# ---------------------------------------------------------------------------------------------------------------------

parameters:

  code:
    name: code
    in: path
    description: The code that identifies a resource
    required: true
    type: string

  subjectOrDelegate:
    name: subjectOrDelegate
    in: path
    description: An indicator for "subject" or "delegate"
    required: true
    type: string
    enum: ['subject','delegate']

  idValue:
    name: idValue
    in: path
    description: The unique identity composite id value
    required: true
    type: string

  invitationCode:
    name: invitationCode
    in: path
    description: The unique identity invitation code
    required: true
    type: string

  delegateIdType:
    name: delegateIdType
    in: path
    description: |
       The type of identifier used to find the delgate party
    required: true
    type: string
    enum: ['PublicIdentifer','authorisationCode','CSPlinkId','OpaqueAgencyToken']

  subjectIdType:
    name: subjectIdType
    in: path
    description: |
       The type of identifier used to find the subject party
    required: true
    type: string
    enum: ['PublicIdentifer','authorisationCode','CSPlinkId','OpaqueAgencyToken']

  idType:
    name: idType
    in: path
    description: |
       Type of identity resolver, possible values are [publicIdentifier, cspLinkId, ...]
    required: true
    type: string
    enum: ['PublicIdentifer','authorisationCode','CSPlinkId','OpaqueAgencyToken']

  delegateIdValue:
    name: delegateIdValue
    in: path
    description: identity value that can be used by identity resolver
    required: true
    type: string

  subjectIdValue:
    name: subjectIdValue
    in: path
    description: identity value that can be used by identity resolver
    required: true
    type: string

  startTimestamp:
    name: startTimestamp
    in: path
    description: Starting time of a relationship. In ISO date Format
    required: true
    type: string
    format: date

  relType:
    name: relType
    in: path
    description: Type of relationship
    required: true
    type: string

# ---------------------------------------------------------------------------------------------------------------------
# Responses
# ---------------------------------------------------------------------------------------------------------------------

responses:

  400:
    description: Bad Input Error
    schema:
      $ref: '#/definitions/Error'

  401:
    description: Unauthorized Error
    schema:
      $ref: '#/definitions/Error'

  403:
    description: Forbidden Error
    schema:
      $ref: '#/definitions/Error'

  404:
    description: Not Found Error
    schema:
      $ref: '#/definitions/Error'

  500:
    description: Server Error
    schema:
      $ref: '#/definitions/Error'
